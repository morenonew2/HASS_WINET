homeassistant:
  customize_domain:
    switch:
      assumed_state: false
############################################################################
#                           automation
############################################################################


############################################################################
#                           input
############################################################################
input_boolean:
  mode_blower:
    name: "Auto Man blower" 
    icon: mdi:toggle-switch


input_text:
  valore_ip_locale_blower:
    name: "Valore IP Locale blower"
    icon: mdi:ip
    min: 0
    max: 16

input_select:
  seleziona_ventola:
    name: "Seleziona ventola"
    icon: mdi:fire-circle
    options:
      - 0
      - 1
      - 2
      - 3
  season_blower:
    name: "Seleziona stagione"
    options:
      - 0
      - 1 
      - 2       
      
input_number:      # temperatura desiderata per attivazione ventola
  scegli_temperatura_blower:
    name: "Scegli temperatura"
    icon: mdi:home-thermometer
    unit_of_measurement: "°C"
    min: 5
    max: 40
    step: 0.1
  
  deltat_blower:
    name: "delta temp. riferimento"
    icon: mdi:home-thermometer	
	unit_of_measurement: "°C"
	step: 0.1
  
  pot_min_blower:
    name: "Potenza minima erogata"
    unit_of_measurement: "%"
    min: 25
    max: 65
    step: 1
	
  pot_max_blower:
    name: "Potenza massima erogata"
    unit_of_measurement: "%"
    min: 65
    max: 100
    step: 1
    
  manspeed_blower:
    name: "Vel. funz. ventola"
    unit_of_measurement: "%"
    min: 0
    max: 100
    step: 1    

############################################################################
#                           rest command
############################################################################
rest_command:
  set_season_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/global/season/{{ (states("input_number.season_blower") }}' 

  set_manspeed_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/manualSpeed/{{ (states("input_number.manspeed_blower") | float(0))  }}' 
  set_deltat_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/deltaT/{{ (states("input_number.deltat_blower") | float(1))  }}' 
  set_min_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/min/{{ (states("input_number.pot_min_blower") | float(0))  }}' 
  set_max_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/max/{{ (states("input_number.pot_max_blower") | float(1))  }}' 


  set_temperatura_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/setAir/{{ (states("input_number.scegli_temperatura_blower") | float(1))  }}' 
  set_mod_man_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/modeAuto/0' 
  set_mod_auto_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/modeAuto/1'
  set_usecable_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/useTsense/1'
  set_usetsense_blower:
    url: 'http://{{ states("input_text.valore_ip_locale_blower") }}/api/fan/{{ states("input_select.seleziona_ventola") }}/useTsense/0'
    
############################################################################
#                           rest sensor
############################################################################
rest:

  - scan_interval: 2
    resource_template: http://{{ states("input_text.valore_ip_locale_b") }}/api/global 
    sensor:
#************  fan 1  ****************************    
      - name: "STATUS FAN1"
        unique_id: status_f1
        value_template: >
          {% if value_json.fan1.status == 0 %}
            OFF
          {% endif %}
          
      - name: "TEMPERATURA IMPOSTATA FAN1"
        unique_id: temperatura_imp_f1 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan1.setAir | float(2) }}   

      - name: "TEMPERATURA RILEVATA FAN1"
        unique_id: temperatura_amb_f1 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan1.air | float(2) }}   

      - name: "MODE FAN1"
        unique_id: mode_f1
        value_template: >
          {% if value_json.fan1.modeAuto == 0 %}
            MANUALE
          {% else %}
            AUTOMATICO
          {% endif %}

      - name: "DELTA T FAN1"
        unique_id: delta_t_f1 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan1.deltaT | float(2) }}   

      - name: "MIN FAN1"
        unique_id: min_f1 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan1.min | float(0) }}   

      - name: "MAX FAN1"
        unique_id: max_f1 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan1.max | float(0) }} 

      - name: "USE TSENSE FAN1"
        unique_id: usetsense_f1
        value_template: >
          {% if value_json.fan1.useTsense == 1 %}  
            Sonda cablata
          {% else %}
            Sonda TSense
          {% endif %}  
      - name: "TSENSE FAN1"
        unique_id: tsense_f1
        device_class: battery
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan1.tsense.battLevel * 100 / 3 | int }}
          
#************  fan 2  ****************************

      - name: "STATUS FAN2"
        unique_id: status_f2
        value_template: >
          {% if value_json.fan2.status == 0 %}
            OFF
          {% endif %}
          
      - name: "TEMPERATURA IMPOSTATA FAN2"
        unique_id: temperatura_imp_f2 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan2.setAir | float(2) }}   

      - name: "TEMPERATURA RILEVATA FAN2"
        unique_id: temperatura_amb_f2 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan2.air | float(2) }}   

      - name: "MODE FAN2"
        unique_id: mode_f2
        value_template: >
          {% if value_json.fan2.modeAuto == 0 %}
            MANUALE
          {% else %}
            AUTOMATICO
          {% endif %}

      - name: "DELTA T FAN2"
        unique_id: delta_t_f2 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan2.deltaT | float(2) }}   

      - name: "MIN FAN2"
        unique_id: min_f2 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan2.min | float(0) }}   

      - name: "MAX FAN2"
        unique_id: max_f2 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan2.max | float(0) }} 

      - name: "USE TSENSE FAN2"
        unique_id: usetsense_f2
        value_template: >
          {% if value_json.fan2.useTsense == 1 %}  
            Sonda cablata
          {% else %}
            Sonda TSense
          {% endif %}  
      - name: "TSENSE FAN2"
        unique_id: tsense_f2
        device_class: battery
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan2.tsense.battLevel * 100 / 3 | int }}

#************  fan 3  ****************************  

      - name: "STATUS FAN3"
        unique_id: status_f3
        value_template: >
          {% if value_json.fan3.status == 0 %}
            OFF
          {% endif %}
          
      - name: "TEMPERATURA IMPOSTATA FAN3"
        unique_id: temperatura_imp_f3 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan3.setAir | float(2) }}   

      - name: "TEMPERATURA RILEVATA FAN3"
        unique_id: temperatura_amb_f3 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan3.air | float(2) }}   

      - name: "MODE FAN3"
        unique_id: mode_f3
        value_template: >
          {% if value_json.fan3.modeAuto == 0 %}
            MANUALE
          {% else %}
            AUTOMATICO
          {% endif %}

      - name: "DELTA T FAN3"
        unique_id: delta_t_f3 
        device_class: temperature
        unit_of_measurement: '°C'
        value_template: >
          {{ value_json.fan3.deltaT | float(2) }}   

      - name: "MIN FAN3"
        unique_id: min_f3 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan3.min | float(0) }}   

      - name: "MAX FAN3"
        unique_id: max_f3 
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan3.max | float(0) }} 

      - name: "USE TSENSE FAN3"
        unique_id: usetsense_f3
        value_template: >
          {% if value_json.fan3.useTsense == 1 %}  
            Sonda cablata
          {% else %}
            Sonda TSense
          {% endif %}  
      - name: "TSENSE FAN3"
        unique_id: tsense_f3
        device_class: battery
        unit_of_measurement: '%'
        value_template: >
          {{ value_json.fan3.tsense.battLevel * 100 / 3 | int }}
          
######   VALORI GLOBAL   ##########################
      - name: "PROBE TEMP BLOWER"
        unique_id: probetemp_blower
        device_class: temperature
        unit_of_measurement: '°C'      
        value_template: >
          {{ value_json.global.probe }}
          
      - name: "FIRE PROBE BLOWER"
        unique_id: fireprobe_blower
        device_class: temperature
        unit_of_measurement: '°C'      
        value_template: >
          {{ value_json.global.fireProbe }} 

      - name: "SEASON BLOWER"
        unique_id: season_blower
        value_template: >
          {% if value_json.global.season == 0 %}
            Standby
          {% elsif value_json.global.season == 1 %}
            Estate
          {% else %}
            Inverno          
          {% endif %}          

      - name: "TYPE PROBE BLOWER"
        unique_id: typeprobe_blower
        value_template: >
          {% if value_json.global.useHighTempNtc == 0 %}
             "Sonda 0÷100 °C"
          {% else %}
             "Sonda 45÷230 °C"          
          {% endif %}
          
      - name: "USE FIRE DETECT BLOWER"
        unique_id: use_firedetect_blower
        value_template: >
          {{ value_json.global.useFireDetectTemp }} 

      - name: "FIRE SET TEMP BLOWER"
        unique_id: set_fire_temp_blower
        device_class: temperature
        unit_of_measurement: '°C'      
        value_template: >
          {{ value_json.global.fireSetTemp }}  

      - name: "FIRMWARE BLOWER"
        unique_id: fw_blower
        value_template: >
          {{ value_json.global.fwVer }}          
          

          
######   VALORI ID   ##########################          
      - name: "device_wifi_blower"
        unique_id: device_wifi_blower
        value_template: > 
          {{ value_json.device.wifi }} 
          
      - name: "device_cloud_blower"
        unique_id: device_cloud_blower
        value_template: > 
          {% if value_json.device.cloud == 0 %}
            Idle
          {% elsif value_json.device.cloud == 1 %}
            In Connessione...
          {% elsif value_json.device.cloud == 2 %}
            Connesso
          {% else %}
            Non Connesso           
          {% endif %}      

      - name: "device_signal_blower"
        unique_id: device_signal_blower
        value_template: > 
          {{ value_json.device.signal }}
          
       - name: "device_ssid_blower"
        unique_id: device_ssid_blower
        value_template: > 
          {{ value_json.device.ssid }}           
          
      - name: "device_ip_blower"
        unique_id: device_ip_blower
        value_template: > 
          {{ value_json.device.ip }} 

      - name: "device_gw_blower"
        unique_id: device_gw_blower
        value_template: > 
          {{ value_json.device.gw }}

      - name: "device_mask_blower"
        unique_id: device_mask_blower
        value_template: > 
          {{ value_json.device.mask }} 

      - name: "device_dhcp_blower"
        unique_id: device_dhcp_blower
        value_template: > 
          {% if value_json.device.dhcp == 1 %}
            Automatico
          {% else %}
            Manuale    
          {% endif %}            
############################################################################
#                           template switch
############################################################################          

switch:
  - platform: template
    switches:
      blower_use_cable_tsense:
        friendly_name: "BLOWER TSENSE/CABLE"
        unique_id: blower_use_cable_tsense
        turn_on:
          service: rest_command.set_usetsense_blower
        turn_off:
          service: rest_command.set_usecable_blower
      blower_auto_man:
        friendly_name: "BLOWER AUTO/MAN"
        unique_id: blower_aut_man
        value_template: |
          {% set rl = "mode_fan"+states("input_select.seleziona_fan")  %}
          {{ is_state('sensor.'+rl, 'MANUALE') }} 
        turn_on:
          service: rest_command.set_mod_man_blower
        turn_off:
          service: rest_command.set_mod_auto_blower
       
############################################################################
#                           template sensor
############################################################################
sensor:
  - platform: template
    sensors:
      segnale_wifi_blower:
        friendly_name: Intensità segnale wifi BLOWER
        value_template: '{{ states("sensor.device_signal_blower") }}' 
        icon_template: |
          {% set rssi_level = states("sensor.device_signal_blower") | int %}
          {% if rssi_level >= 4 %}
            mdi:wifi-strength-4
          {% elif rssi_level == 3 %}
            mdi:wifi-strength-3
          {% elif rssi_level == 2 %}
            mdi:wifi-strength-2
          {% elif rssi_level == 1 %}
            mdi:wifi-strength-1
          {% elif rssi_level == 0 %}
            mdi:wifi-strength-outline
          {% else %}
            mdi:wifi-strength-off-outline
          {% endif %}


  
 

          
          

